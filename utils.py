import logging

# üìã Configuration du syst√®me de logs partag√©
# Enregistre les logs dans un fichier 'transcripteur.log' et les affiche aussi dans la console
logging.basicConfig(
    level=logging.INFO,  # Niveau de log minimum (DEBUG, INFO, WARNING, ERROR, CRITICAL)
    format="%(asctime)s [%(levelname)s] %(message)s",  # Format des messages
    handlers=[
        logging.FileHandler("transcripteur.log"),   # √âcrit les logs dans un fichier
        logging.StreamHandler()                     # Affiche les logs dans la console
    ]
)

# Logger global utilisable dans tous les modules
logger = logging.getLogger(__name__)

import subprocess, sys

def install_missing_libraries():
    """
    V√©rifie si certaines biblioth√®ques indispensables sont install√©es.
    Si une biblioth√®que manque, elle est automatiquement install√©e via pip.

    Cela garantit que l'utilisateur final dispose bien de toutes les d√©pendances
    n√©cessaires pour ex√©cuter l'application.
    """
    for lib in ["torch", "torchaudio", "openai-whisper", "openai", "tk"]:
        try:
            __import__(lib.replace("-", "_"))  # Teste l'import
        except ImportError:
            subprocess.check_call([sys.executable, "-m", "pip", "install", lib])  # Installe si absent

def toggle_visibility(entry, button):
    """
    Alterne l'affichage de la cl√© API dans le champ `entry`.
    Utilis√© pour masquer/afficher la cl√© API √† l'utilisateur.

    Args:
        entry (tk.Entry): Champ de saisie contenant la cl√© API.
        button (ttk.Button): Bouton de bascule dont le texte doit changer.
    """
    if entry.cget("show") == "":
        entry.config(show="*")           # Masquer le texte
        button.config(text="Afficher")   # Modifier le texte du bouton
    else:
        entry.config(show="")            # Afficher le texte en clair
        button.config(text="Masquer")    # Modifier le texte du bouton
